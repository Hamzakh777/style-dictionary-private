import { Config as Config$2 } from 'style-dictionary/types';
import { Dictionary } from 'style-dictionary/types/Dictionary';
import { Platform } from 'style-dictionary/types/Platform';
import { Config } from 'style-dictionary/types/Config';
import { Config as Config$1 } from 'tailwindcss/types';

type TailwindOptions = Pick<Config$1, 'content' | 'darkMode'> & {
    plugins: Array<'typography' | 'forms' | 'aspect-ratio' | 'line-clamp' | 'container-queries'>;
};
type TailwindFormatType = 'js' | 'cjs';
type SdTailwindConfigType = {
    type: 'all' | string;
    formatType?: TailwindFormatType;
    isVariables?: boolean;
    source?: Config['source'];
    transforms?: Platform['transforms'];
    buildPath?: Platform['buildPath'];
    prefix?: Platform['prefix'];
    tailwind?: Partial<TailwindOptions>;
};
type TailwindFormatObjType = Pick<SdTailwindConfigType, 'type' | 'isVariables' | 'prefix' | 'tailwind'> & {
    dictionary: Dictionary;
    formatType: TailwindFormatType;
};

declare const getTailwindFormat: ({ dictionary: { allTokens }, type, isVariables, prefix, tailwind }: TailwindFormatObjType) => string;
declare const makeSdTailwindConfig: ({ type, formatType, isVariables, source, transforms, buildPath, prefix, tailwind }: SdTailwindConfigType) => Config$2;

export { getTailwindFormat, makeSdTailwindConfig };
