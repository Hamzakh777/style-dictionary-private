'use strict';

var T=/([\p{Ll}\d])(\p{Lu})/gu,w=/(\p{Lu})([\p{Lu}][\p{Ll}])/gu,y=/(\d)(\p{Ll})/gu,h=/(\p{L})(\d)/gu,E=/[^\p{L}\d]+/giu,f="$1\0$2",j="";function L(e,r={}){let{separateNumbers:a}=r,t=e.trim();t=t.replace(T,f).replace(w,f),a&&(t=t.replace(y,f).replace(h,f)),t=t.replace(E,"\0");let n=0,i=t.length;for(;t.charAt(n)==="\0";)n++;if(n===i)return [];for(;t.charAt(i-1)==="\0";)i--;return t.slice(n,i).split(/\0/g)}function u(e,r){let a=R(e,r?.prefixCharacters),t=S(r?.locale),n=_(r?.locale),i=$(t,n);return a+L(e,r).map((s,o)=>o===0?t(s):i(s,o)).join("")}function S(e){return e===!1?r=>r.toLowerCase():r=>r.toLocaleLowerCase(e)}function _(e){return e===!1?r=>r.toUpperCase():r=>r.toLocaleUpperCase(e)}function $(e,r){return (a,t)=>{let n=a[0];return (t>0&&n>="0"&&n<="9"?"_"+n:r(n))+e(a.slice(1))}}function R(e,r=j){let a="";for(let t=0;t<e.length;t++){let n=e.charAt(t);if(r.includes(n))a+=n;else break}return a}var m=e=>e.endsWith("-")?e:`${e}-`,x=(e,r,a)=>{let t=r.length-1;for(let n=0;n<t;++n){let i=u(r[n]);i in e||(e[i]={}),e=e[i];}r[t]==="DEFAULT"?e[r[t]]=a:e[u(r[t])]=a;},c=(e,r)=>e===void 0?r:e,g=(e,r,a=" ".repeat(4))=>r!=="all"?e:a+e,d=(e,r)=>e.replace(/"(\\[^]|[^\\"])*"\s*:?/g,t=>/[0-9]/.test(t)&&/[a-zA-Z]/.test(t)?t:/:$/.test(t)?g(t.replace(/^"|"(?=\s*:$)/g,""),r):t).replace(/}/g,t=>g(t,r)),C=(e,r,a,t,n)=>`/** @type {import('tailwindcss').Config} */
 module.exports = ${(()=>{let o=`{
  mode: "jit",
  content: [${t}],
  darkMode: "${a}",
  theme: {
    extend: ${d(r,e)},
  },`;return n.length>0&&(o+=`
 plugins: [${n}]`),o+=`
}`,o})()}`;var b=(e,r,a,t)=>{let n=e.reduce((s,o)=>{if(o.attributes===void 0)throw new Error(`Token ${o.name} has no attributes`);return (o.attributes.category===r||r==="all")&&(a?s[o.path.join(".")]=t?`var(--${m(t)+o.name})`:`var(--${o.name})`:s[o.path.join(".")]=o.value),s},{}),i={};return Object.keys(n).forEach(s=>{let o=s.split(".").filter(l=>l!==r);x(i,o,n[s]);}),JSON.stringify(i,null,2)},P=({dictionary:{allTokens:e},type:r,isVariables:a,prefix:t,tailwind:n})=>{let i=b(e,r,a,t);if(r==="all"){let s=c(n?.darkMode,"class"),o=c(Array.isArray(n?.content)?n?.content.map(p=>`"${p}"`):n?.content,['"./src/**/*.{ts,tsx}"']),l=c(n?.plugins?.map(p=>`require("@tailwindcss/${p}")`),[]);return C(r,i,s,o,l)}else return `module.exports = ${d(i)}`},I=({type:e,formatType:r="js",isVariables:a=!1,source:t,transforms:n,buildPath:i,prefix:s,tailwind:o})=>{if(e===void 0)throw new Error("type is required");if(r!=="js"&&r!=="cjs")throw new Error('formatType must be "js" or "cjs"');return {source:c(t,["tokens/**/*.json"]),format:{tailwindFormat:({dictionary:l})=>P({dictionary:l,formatType:r,isVariables:a,prefix:s,type:e,tailwind:o})},platforms:{[e!=="all"?`tailwind/${e}`:"tailwind"]:{transforms:c(n,["attribute/cti","name/cti/kebab"]),buildPath:c(i,"build/web/"),files:[{destination:e!=="all"?`${e}.tailwind.js`:`tailwind.config.${r}`,format:"tailwindFormat"}]}}}};

exports.getTailwindFormat = P;
exports.makeSdTailwindConfig = I;
